<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baobaotao.mybatis.mapping.UserMapper">
<!-- 自定义返回结果集 -->
   <resultMap id="userMap" type="User"><!-- id属性 ，resultMap标签的标识； type属性 ，返回值的全限定类名，或类型别名。 -->
        <id property="userId" column="user_id" javaType="java.lang.Integer"></id><!-- id元素 ，用于设置主键字段与领域模型(Bean)属性的映射关系 -->
        <result property="userName" column="user_name" javaType="java.lang.String"></result><!-- result元素 ，用于设置普通字段与领域模型(Bean)属性的映射关系 -->
        <result property="password" column="password" javaType="java.lang.String"></result>
        
        <result property="credits" column="credits" javaType="java.lang.Integer"></result>
        <result property="lastIp" column="last_ip" javaType="java.lang.String"></result>
        <result property="lastVisit" column="last_visit" javaType="java.util.Date"></result>
    </resultMap>
<!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型-->    
<!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 
            方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 -->    
<!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
<!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->


    <insert id="insertUser" useGeneratedKeys="true" keyProperty="userId">
    	insert into t_user (user_name,password) values (#{userName},#{password})
    </insert>
    
    <update id="updateUser" >
      	<!-- update t_user set user_name=#{userName},password=#{password} where user_id=#{userId} -->
      	update t_user set last_visit=#{lastVisit},last_ip=#{lastIp},credits=#{credits} where user_id=#{userId}
    </update>
    
    <delete id="deleteUser" parameterType="int">
     	delete from t_user where user_id=#{userId}  
    </delete>
    
    <select id="selectUserById" resultMap="userMap">
     	select * from t_user where user_id = #{0}
    </select>
    
    <select id="selectUserByName" resultMap="userMap">
     	select * from t_user where user_name = #{0}
    </select>
    
    <select id="selectUserLikeName" resultMap="userMap">
	     select * from t_user
	     <if test="#{0} != null">
	          where user_name like "%"#{0}"%"
	      </if>
    </select>
    
    <select id="selectAllUser" resultMap="userMap">
     	select * from t_user
    </select>
    
    <select id="login" resultMap="userMap">
     	select * from t_user where user_name=#{0} and password=#{1}
    </select>

</mapper>